/*
 * assignment_3_22.c
 *
 *  Created on: Feb 24, 2020
 *      Author: AymanW
 *  Write a c function that removes the repeated number of an
 *  input sorted array and return a new array without the repeated
 *  numbers. The function shall return error if the size of the input
 *  array is ZERO. The function takes four inputs:
 *  a. Old array.
 *  b. Old array size.
 *  c. New array (empty array).
 *  d. The size of the new array after fill it in the function.
 *  int removeDuplicates(int arr_old[], int n_old, int arr_new[], int *n_new)
 *  Example:
 *  arr1 = {1,2,3,3,3,4,4,5,5,5} => arr2 = {1,2,3,4,5}
 */
#include<stdio.h>
#define sizee 255
#define ERROR 0
#define SUCCESS 1
int removeDuplicates(int arr_old[], int n_old, int arr_new[], int* n_new);
void main(void){
	int i;
	int state;
	int newSize=0;
	int oldArr[sizee]={1,2,2,2,2,3,4,5};
	int newArr[sizee]={0};
	state=removeDuplicates(oldArr,sizee,newArr,&newSize);
	printf("Arr1 ={");
	for(i=0;i<newSize;i++){
		printf("%d,",oldArr[i]);
	}
	printf("} => Arr2 ={");
	for(i=0;i<newSize;i++){
		printf("%d,",newArr[i]);
	}
	printf("}");
	printf("\nstate is %d",state);

}

int removeDuplicates(int arr_old[], int n_old, int arr_new[], int* n_new){
	int i;
	* n_new=0;
	if(n_old==0){
		return ERROR;
	}

	for(i=0;i<n_old;i++){
		if(arr_old[i]!=arr_old[i+1]){
			arr_new[*n_new]=arr_old[i];
			(*n_new)++;
		}
	}
	return SUCCESS;
}
